function r=EMAlgorithmDemo
%THIS IS A BIT OF CODE TO GENERATE DATA FROM A 1-D MIXTURE OF GAUSSIANS AND
%TO PLOT IT.  THE AIM IS FOR YOU TO FILL IN THE E-M ALGORITHM PART.  I HAVE
%PROVIDED PSEUDO-CODE TO HELP YOU, AND CODE TO PLOT THE CURRENT ESTIMATES
%OF THE MEAN AND STANDARD DEVIATION SO YOU CAN SEE IF YOUR ALGORITHM IS
%WORKING

%close all open plots
close all;


%DEFINE TRUE PARAMETERS FOR MIXTURE OF TWO GAUSSIANS
gaussTrue.nGauss = 2;
gaussTrue.p = [0.3 0.7];
gaussTrue.mean = [-1 0.5];
gaussTrue.std = [0.5 0.25];

%GENERATE DATA FROM MIXTURE OF GAUSSIANS
nData = 400;
data = zeros(nData,1);
%for each data point
for (cData = 1:nData)
    %draw random number between zero and one
    rand01 = rand(1);
    %if less than pre-defined value then the data comes from first gaussian
    if (rand01<gaussTrue.p(1))
        data(cData) = randn*gaussTrue.std(1)+gaussTrue.mean(1);
    else%otherwise it comes from second gaussian
        data(cData) = randn*gaussTrue.std(2)+gaussTrue.mean(2);        
    end;
end;

%INITIALIZE ESTIMATED GAUSSIAN PARAMETERS
gaussEst.nGauss = 2;
gaussEst.p = [0.5 0.5];
gaussEst.mean = 2*randn(1,2);
gaussEst.std = 0.1+1.5*rand(1,2);

%DRAW DATA, ACTUAL GAUSSIANS, ESTIMATED GAUSSIANS
figure;
drawEMData(data,gaussEst,gaussTrue);
drawnow;

%MAIN E-M ROUTINE - YOU SHOULD FILL THIS IN
%there are nData data points, and there is a binary hidden variable associated
%with each.  If the hidden variable is 0 this indicates that the data was
%generated by the first Gaussian.  If the hidden variable is 1 then this
%indicates that the hidden variable was generated by the second Gaussian.

%in the E-M algorithm, we calculate a complete posterior distribution over
%the hidden variables (nData of them) in the E-Step.  In the M-Step, we
%update the parameters of the Gaussians (mean, sd, weight).  Ideally, we
%would get the posterior over these as well, but we approximate this with a
%delta function at the single most likely value.

hidden =zeros(nData,2);
maxIter=10;

%FOR EACH ITERATION
for cIter=1:maxIter
   %1. DO EXPECTATION STEP
   %FOR EACH POINT
        %FILL IN THIS ROW OF THE HIDDEN VARIABLE - WHAT IS THE POSTERIOR
        %PROB THAT THIS DATA POINT WAS GENERATED BY GAUSSIAN 1/ GAUSSIAN 2?
        
   %END
   hidden(:,1)=getGaussProb(data,gaussEst.mean(1),gaussEst.std(1)).*gaussEst.p(1);
   hidden(:,2)=getGaussProb(data,gaussEst.mean(2),gaussEst.std(2)).*gaussEst.p(2);  
   sum(hidden(:))
   hidden=hidden./repmat(sum(hidden,2),1,2);
   
   %2. DO MAXIMIZATION STEP
   %a) UPDATE WEIGHTING PARAMETERS gaussEst.p BASED ON TOTAL POST PROBS FROM
   %HIDDEN VARIABLES
   gaussEst.p(1)=sum(hidden(:,1))/cData;
   gaussEst.p(2)=sum(hidden(:,2))/cData;
   
   
   %b) UPDATE MEAN PARAMETERS gaussEst.mean BASED ON WEIGHTED AVERAGE WHERE
   %WEIGHTS ARE GIVEN BY POSTERIOR ESTIMATES CALCULATED IN STEP 1.
   gaussEst.mean(1)=sum(hidden(:,1).*data)/sum(hidden(:,1));
   gaussEst.mean(2)=sum(hidden(:,2).*data)/sum(hidden(:,2));
   
   %c) UPDATE STANDARD DEVIATION PARAMETERS gaussEst.std BASED ON WEIGHTED
   %AVERATE WHERE WEIGHTS ARE GIVEN BY POSTERIOR ESTIMATES CALCULATED IN
   %STEP 1
    gaussEst.std(1)=sum(hidden(:,1).*((data-gaussEst.mean(1)).^2))/sum(hidden(:,1));
    gaussEst.std(2)=sum(hidden(:,2).*((data-gaussEst.mean(2)).^2))/sum(hidden(:,2));
   %3. DRAW DATA WITH UPDATED PARAMETERS (just uncommment)
   drawEMData(data,gaussEst,gaussTrue);
   drawnow;
%END
end
i

%===========================================================
%subroutine to draw data
function r = drawEMData(data,gaussEst,gaussTrue)
    %delete previous plot if it exists
    hold off;
    %bin the data to make a histogram
    binWidth = 0.1;
    binMin =-4;
    binMax = 4;
    xHist = binMin:binWidth:binMax;
    yHist = hist(data,xHist)/(length(data)*binWidth);
    bar(xHist,yHist,1);
    %retain this plot
    hold on;
    %calculate Gaussian data
    gaussProbTrue1 = gaussTrue.p(1)*getGaussProb(xHist,gaussTrue.mean(1),gaussTrue.std(1));
    gaussProbTrue2 = gaussTrue.p(2)*getGaussProb(xHist,gaussTrue.mean(2),gaussTrue.std(2));
    gaussProbEst1 = gaussEst.p(1)*getGaussProb(xHist,gaussEst.mean(1),gaussEst.std(1));
    gaussProbEst2 = gaussEst.p(2)*getGaussProb(xHist,gaussEst.mean(2),gaussEst.std(2));
    gaussEnvEst = gaussProbEst1+gaussProbEst2;
    
    %plot gaussian data
    plot (xHist, gaussProbTrue1,'b-');
    plot (xHist, gaussProbTrue2,'b--');
    plot (xHist, gaussProbEst1,'r-');
    plot (xHist, gaussProbEst2,'r--');
    plot (xHist, gaussEnvEst,'g-');
    
    %draw legend
    legend('Data','True Gaussian 1','True Gaussian 2','Estimated Gaussian 1', 'Estimated Gaussian 2','Sum of Estimated');
    
    %tidy up plot
    xlabel('Data Value');
    ylabel('Probability Density');
    set(gca,'Box','Off');
    set(gcf,'Color',[1 1 1]);
    xlim([binMin binMax]);
    ylim([0 max(yHist)]);

%=========================================

%subroutine to return gaussian probabilities
function prob = getGaussProb(x,mean,sd)

prob = exp(-0.5*((x-mean).^2)/(sd*sd));
prob = prob/ sqrt(2*pi*sd*sd);